#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('./app');
var debug = require('debug')('project:server');
var http = require('http');
/*
var fs = require('fs');
var options = {
    key: fs.readFileSync('./bin/server.key'),
    cert: fs.readFileSync('./bin/server.crt')
};*/

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//var server = https.createServer(options,app);
var server = http.createServer(app);
//
var io = require('socket.io')(server);

io = io.on('connection', function (socket) {
    require('./socket').connection(socket);
});
//

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var ioCustom = {
  inviteMemberToProject:function(projectID,invites){
      var projectName = require('./socket').getProjectName(projectID);
      invites.forEach(function(email) {
          var id = require('./socket').getClient(email);
          io.to(id).emit("Invitation",projectName);
      });
  },
    memberJoinedProject:function(projectID,email){
        var projectName = require('./socket').getProjectName(projectID);
        var id = require('./socket').getClient(email);
        io.to(projectID).emit("memberJoined",projectName,email);
        //add user in room/project
        io.connected[id].join(projectID);
        console.log(email+" joined room/projectID "+projectID);
    },
    joinRoom:function(roomID,email){
        var id = require('./socket').getClient(email);
        //add user in room/project
        io.connected[id].join(roomID);
    },
    taskAssignedToMembers:function(projectID,task){
        var projectName = require('./socket').getProjectName(projectID);
        io.to(projectID).emit("taskAssigned",projectName,task);
    },
    sentMessage:function(receiver,message_id){
        var id = require('./socket').getClient(receiver);
        io.to(id).emit("message",message_id);
    },
    sentMessageProject:function(receiver,message_id){
        io.to(receiver).emit("projectMessage",message_id);
    }
};

module.exports = {
    to:function(id){
        return io.to(id);
    },
    io:ioCustom
};